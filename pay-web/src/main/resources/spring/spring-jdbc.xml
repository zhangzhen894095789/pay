<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 1. 数据源 : DriverManagerDataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">

		<!-- 数据库基本信息配置 -->
		<property name="url" value="jdbc:mysql://localhost:3306/pay" />
		<property name="username" value="root" />
		<property name="password" value="root" />
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />


		<property name="initialSize" value="10" />
		<!-- 连接池支持的最大连接数 -->
		<property name="maxActive" value="40" />
		<!-- 连接池中最多可空闲maxIdle个连接 已经不再使用，配置了也没效果 -->
		<!-- <property name="maxIdle" value="50" /> -->
		<!-- 连接池中最少空闲maxIdle个连接 -->
		<property name="minIdle" value="10" />
		<!-- 配置获取连接等待超时的时间 ,毫秒 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="1800000" />
		<property name="validationQuery" value="SELECT 1" />
		<!-- testWhileIdle -->
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 mysql default false -->
		<!-- <property name="poolPreparedStatements" value="false" /> <property
			name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		<!-- 自动清除无用连接 -->
		<!-- 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。 <property name="removeAbandoned"
			value="true"></property> <property name="removeAbandonedTimeout" value="1800"></property>
			<property name="logAbandoned" value="true"></property> -->
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	
	 <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.zz.pay.dao.*</value>
            </list>
        </property>
    </bean>

	<!-- 2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 MyBatis定义数据源,同意加载配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	     <property name="configLocation" value="classpath:spring/mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.zz.pay.model" />
		<property name="mapperLocations" value="classpath*:mapper/*.xml" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- 3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory 
		basePackage:指定sql映射文件/接口所在的包（自动扫描） -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zz.pay.dao" />
		<property name="properties">
			<value>
				mappers=tk.mybatis.mapper.common.Mapper
				IDENTITY=MYSQL
				notEmpty=true
			</value>
		</property>
	</bean>

	<!-- 4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 5. 使用声明式事务 transaction-manager：引用上面定义的事务管理器 -->
	<tx:annotation-driven transaction-manager="txManager" />

</beans>
